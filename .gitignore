# 🛒 EasyCart - Modern E-commerce Mobile App

<div align="center">
  <img src="assets/images/easycart.png" alt="EasyCart Logo" width="120" height="120">
  
  <p align="center">
    <strong>A beautiful, feature-rich e-commerce mobile application built with React Native, Expo, and Firebase</strong>
  </p>
  
  <p align="center">
    EasyCart provides a seamless shopping experience with modern UI design, comprehensive functionality, and professional user experience.
  </p>
  
  <p align="center">
    <img src="https://img.shields.io/badge/React_Native-20232A?style=for-the-badge&logo=react&logoColor=61DAFB" alt="React Native">
    <img src="https://img.shields.io/badge/Expo-000020?style=for-the-badge&logo=expo&logoColor=white" alt="Expo">
    <img src="https://img.shields.io/badge/Firebase-FFCA28?style=for-the-badge&logo=firebase&logoColor=black" alt="Firebase">
    <img src="https://img.shields.io/badge/License-MIT-green.svg?style=for-the-badge" alt="License">
  </p>
</div>

## 📱 Screenshots

*Add your app screenshots here*

## ✨ Key Features

### 🔐 Authentication & Security
- Secure user registration and login with Firebase
- Profile management with custom avatars
- Protected routes and user sessions
- Logout with confirmation alerts using SweetAlert

### 🛍️ Enhanced Shopping Experience
- Browse products with stunning gradient UI design
- Dynamic category filtering from Firebase Firestore
- Advanced search functionality across products and categories
- Real-time product availability and stock management
- Intuitive shopping cart with quantity adjustments
- Seamless checkout process

### 🎨 Modern UI/UX Design
- Beautiful blue gradient headers (`#1976D2` → `#2196F3` → `#64B5F6`)
- Consistent EasyCart branding with professional logo integration
- Enhanced product cards with optimized text alignment
- SweetAlert integration for better user feedback
- Responsive design with proper shadows and elevation
- Professional typography with text shadows and letter spacing

### 📱 Core Application Screens
- **HomeScreen**: Public product discovery with categories and search
- **ProductsScreen**: Authenticated user shopping with advanced filtering
- **CartScreen**: Complete shopping cart management with clear actions
- **OrderHistoryScreen**: Comprehensive order tracking and history
- **Admin Screens**: Product and order management (Admin access)

### 🔧 Technical Implementation

- Firebase Firestore for real-time database operations
- Context API for efficient state management (Auth, Cart, Theme)
- Custom hooks for shopping cart functionality
- SafeImage component with graceful fallback handling
- Professional error handling with SweetAlert integration
- Optimized performance with proper component lifecycle management

## 🚀 Technologies & Libraries

- **Framework**: React Native with Expo SDK
- **Backend**: Firebase (Authentication + Firestore Database)
- **UI Components**: 
  - Expo Linear Gradient for beautiful headers
  - Expo Vector Icons (Ionicons)
  - Custom SweetAlert utility for notifications
- **State Management**: React Context API
- **Navigation**: React Navigation
- **Build System**: Expo Application Services (EAS)

## 📁 Project Structure

```
EasyCart/
├── src/
│   ├── components/          # Reusable components
│   │   └── SafeImage.js    # Image component with fallback
│   ├── context/            # React Context providers
│   │   ├── AuthContext.js  # Authentication state management
│   │   ├── CartContext.js  # Shopping cart functionality
│   │   └── ThemeContext.js # App-wide theming
│   ├── screens/           # Application screens
│   │   ├── admin/         # Admin management screens
│   │   ├── auth/          # Authentication screens
│   │   ├── user/          # User-specific screens
│   │   └── HomeScreen.js  # Public product browsing
│   ├── services/          # External services
│   │   └── firebaseConfig.js # Firebase configuration
│   └── utils/             # Utility functions
│       └── SweetAlert.js  # Custom alert system
├── assets/                # Application assets
│   ├── images/           # EasyCart logo and graphics
│   └── icons/            # App icons
└── App.js                # Main application component
```

## 🛠️ Installation & Setup

### Prerequisites
- Node.js (v14 or higher)
- Expo CLI (`npm install -g expo-cli`)
- Android Studio (for Android development)
- Xcode (for iOS development - macOS only)

### Setup Instructions

1. **Clone or Download the repository**
2. **Install dependencies**
   ```bash
   npm install
   ```
3. **Configure Firebase**
   - Create a Firebase project at [Firebase Console](https://console.firebase.google.com/)
   - Enable Authentication (Email/Password)
   - Enable Firestore Database
   - Add your Firebase configuration to `src/services/firebaseConfig.js`
4. **Start development server**
   ```bash
   npx expo start
   ```
5. **Run on device**
   - Install Expo Go app on your mobile device
   - Scan QR code or use simulator

## 📱 Core Features Implementation

### 🔧 Admin Dashboard
- ✅ Secure admin authentication with role-based access
- ✅ Complete product management (Add, Edit, Delete, Stock management)
- ✅ Real-time order management and status updates
- ✅ Order tracking with detailed customer information
- ✅ Professional admin interface with enhanced UI

### 👥 User Experience
- ✅ Seamless product browsing with category filtering
- ✅ Advanced search functionality across products and categories
- ✅ Detailed product views with high-quality images
- ✅ Shopping cart with real-time quantity management
- ✅ Secure checkout process with customer information collection
- ✅ Comprehensive order history and tracking
- ✅ Profile management with custom avatar support

### 🎨 Enhanced UI Components
- ✅ Modern gradient headers with professional styling
- ✅ EasyCart logo integration with consistent branding
- ✅ SweetAlert integration for user-friendly notifications
- ✅ Enhanced product cards with improved typography
- ✅ Professional shadows, elevation, and visual hierarchy
- ✅ Responsive design optimized for various screen sizes

## 🏆 Key Improvements & Enhancements

### Recent Updates
- **Enhanced Search Bar**: Consistent design across all screens matching HomeScreen format
- **Professional UI Overhaul**: Beautiful gradient headers with proper logo placement
- **SweetAlert Integration**: Comprehensive alert system replacing default React Native alerts
- **Improved Product Cards**: Better text alignment and typography for enhanced readability
- **SafeImage Component**: Graceful image loading with automatic fallback to icons
- **Performance Optimization**: Improved state management and component lifecycle handling

### Technical Achievements
- **Firebase Integration**: Real-time database operations with Firestore
- **Context API Implementation**: Efficient state management across the application
- **Professional Error Handling**: Comprehensive error management with user-friendly feedback
- **Cross-Platform Compatibility**: Optimized for both Android and iOS platforms
- **Build System**: Successfully integrated with Expo Application Services (EAS)

## 📱 Build & Distribution

### Generate APK for Android
```bash
# Set environment variable (if needed)
$env:EAS_NO_VCS=1

# Build preview APK
npx eas build -p android --profile preview

# Build production APK
npx eas build -p android --profile production
```

### Build for App Stores
```bash
# Android Play Store
npx eas build -p android --profile production

# iOS App Store
npx eas build -p ios --profile production
```

## 🤝 Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 👨‍💻 Developer

**Mark Jere Soltam**
- GitHub: [@markjeresoltam21](https://github.com/markjeresoltam21)
- Email: markjeresoltam21@gmail.com

## 🙏 Acknowledgments

- **Firebase** for providing excellent backend services
- **Expo Team** for the amazing development platform and tools
- **React Native Community** for comprehensive documentation and support
- **Open Source Community** for various libraries and components used

## 🔗 Links

- **Live Demo**: [Download APK](https://expo.dev/artifacts/eas/adUUdcB83NXfdDUaXxKLSx.apk)
- **Firebase Console**: [Project Dashboard](https://console.firebase.google.com/)
- **Expo Dashboard**: [EAS Build Status](https://expo.dev/accounts/mjsoltam/projects/easycart)

## 📞 Support & Contact

If you have any questions, suggestions, or need help with the project:
- **Open an Issue**: Use GitHub Issues for bug reports and feature requests
- **Email**: markjeresoltam21@gmail.com
- **Discussion**: Use GitHub Discussions for general questions

---

### ⭐ Star this Repository

If you found this project helpful or interesting, please give it a star! It helps others discover the project and motivates continued development.

**Happy Shopping with EasyCart! 🛒✨**

---

*Built with ❤️ using React Native, Expo, and Firebase*

## Tech Stack
- **Frontend:** React Native with Expo
- **Backend:** Firebase (Firestore, Authentication)
- **Navigation:** React Navigation
- **Icons:** Expo Vector Icons
- **Image Handling:** Expo Image Picker

## Prerequisites
- Node.js (v14 or higher)
- npm or yarn
- Expo CLI
- Firebase project setup

## Installation

1. **Clone and navigate to project:**
   ```bash
   cd EasyCart
   ```

2. **Install dependencies:**
   ```bash
   npm install
   ```

3. **Configure Firebase:**
   - Create a Firebase project at https://console.firebase.google.com
   - Enable Authentication (Email/Password)
   - Create Firestore database
   - Copy your Firebase config and update `src/services/firebaseConfig.js`

4. **Run the app:**
   ```bash
   # For development
   npx expo start

   # For Android
   npm run android

   # For iOS (requires macOS)
   npm run ios

   # For web
   npm run web
   ```

## Firebase Setup

1. **Authentication Setup:**
   - Go to Firebase Console → Authentication → Sign-in method
   - Enable Email/Password provider
   - Create admin user: `admin@easycart.com` with password `admin123`

2. **Firestore Setup:**
   - Create a Firestore database
   - Set up collections: `products`, `orders`
   - Configure security rules as needed

3. **Update Configuration:**
   - Replace placeholders in `src/services/firebaseConfig.js` with your Firebase config

## Demo Accounts

### Admin Login
- Email: `markjeresoltam@gmail.com`
- Password: `admin123`

### Customer Logins
- **Kim Duites:** `kim.duites@easycart.com` / `user123`
- **Rolly Junsay:** `rolly.junsay@easycart.com` / `user123`
- **Ria Angeline Balana:** `ria.balana@easycart.com` / `user123`
- **Julie Banayag:** `julie.banayag@easycart.com` / `user123`

## Project Structure
```
src/
├── screens/
│   ├── admin/          # Admin screens
│   ├── user/           # User screens
│   └── AuthScreen.js   # Login/Register
├── navigation/         # Navigation configuration
├── context/           # React Context (Auth, Cart)
├── services/          # Firebase configuration
├── components/        # Reusable components
└── utils/            # Utility functions
```

## Core MVP Features

### Admin Features
1. **Product Management**
   - Add new products with images
   - Edit existing products
   - Delete products
   - View product inventory

2. **Order Management**
   - View all customer orders
   - Update order status (Pending → Confirmed → Completed)
   - Track order details and customer information

### User Features
1. **Product Browsing**
   - View product catalog
   - Search products
   - View detailed product information

2. **Shopping Cart**
   - Add/remove items
   - Adjust quantities
   - View cart total

3. **Checkout Process**
   - Enter customer information
   - Place orders with Cash on Delivery
   - View order confirmation

4. **Order Tracking**
   - View order history
   - Track order status updates

## Future Enhancements
- User registration/login system
- Advanced search and filtering
- Online payment integration (PayPal, Stripe)
- Push notifications for order updates
- Admin analytics and reporting
- Multi-vendor support
- Product reviews and ratings

## Development Notes
- Uses React Navigation v6 for navigation
- Implements Context API for state management
- Firebase Firestore for real-time data
- Responsive design for different screen sizes
- Error handling and loading states

## Troubleshooting
1. **Metro bundler issues:** Clear cache with `npx expo start --clear`
2. **Firebase authentication:** Ensure correct config in `firebaseConfig.js`
3. **Navigation errors:** Make sure all screen components are properly imported

## Contributing
This is a demonstration project. For production use, consider:
- Enhanced error handling
- Input validation
- Security rules optimization
- Performance optimization
- Testing implementation

## License
MIT License - Feel free to use this code for learning and development purposes.
